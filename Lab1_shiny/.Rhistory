corrplot(cor(Training[ , 1:10]),
method = "number",
number.cex=0.75,
type = "upper")
p
p<- ggplot(Training,aes(x= median_income,y=median_house_value))+geom_point()+geom_smooth()
p
p<- ggplot(Training,aes(x= median_income,y=median_house_value))+geom_point(col = "red")+geom_smooth()
p
p<- ggplot(Training,aes(x= median_income,y=median_house_value))+geom_point(col = "blue")+geom_smooth(col = "red")
p<- ggplot(Training,aes(x= median_income,y=median_house_value)) + geom_point(col = "blue") + geom_smooth(col = "red")
p
graf_income_value<- ggplot(Training,aes(x= median_income,y=median_house_value)) + geom_point(col = "blue") + geom_smooth(col = "red")
graf_income_value
graf_income_value<- ggplot(Training,aes(x= median_income,y=median_house_value)) + geom_point(col = "blue") + geom_smooth(col = "red")
graf_income_value
graf_income_value<- ggplot(Training,aes(x= total_rooms,y=median_house_value)) + geom_point(col = "blue") + geom_smooth(col = "red")
graf_income_value
graf_income_value<- ggplot(Training,aes(x= total_rooms+ total_bedrooms,y=median_house_value)) + geom_point(col = "blue") + geom_smooth(col = "red")
graf_income_value
graf_income_value<- ggplot(Training,aes(x= total_rooms*total_bedrooms,y=median_house_value)) + geom_point(col = "blue") + geom_smooth(col = "red")
graf_income_value
graf_income_value<- ggplot(Training,aes(x= total_rooms+total_bedrooms,y=median_house_value)) + geom_point(col = "blue") + geom_smooth(col = "red")
graf_income_value
graf_rooms_value<- ggplot(Training,aes(x= total_rooms+total_bedrooms,y=median_house_value)) + geom_point(col = "blue") + geom_smooth(col = "red")
graf_rooms_value
graf_income_value<- ggplot(Training,aes(x= median_income,y=housing_median_age)) + geom_point(col = "blue") + geom_smooth(col = "red")
graf_income_value
graf_age_value<- ggplot(Training,aes(x= housing_median_age,y=median_house_value)) + geom_point(col = "blue") + geom_smooth(col = "red")
graf_age_value
train<- as.matrix(Training, rownames.force=NA)
train
#test<- as.matrix(Test_Inner, rownames.force=NA)
train <- as(train, "sparseMatrix")
train
#Creando una matriz dispersa como estructura
train<- as.matrix(Training, rownames.force=NA)
train
train_Data <- xgb.DMatrix(data = train[,-9], label = train[,"median_house_value"])
train_Data
# Tuning the parameters #
cv.ctrl <- trainControl(method = "repeatedcv", repeats = 1,number = 3)
xgb.grid <- expand.grid(nrounds = 100,
max_depth = 12,
eta = 0.01,
gamma = 0.0,
colsample_bytree = 0.8,
min_child_weight=1,
subsample=0.5
)
xgb.grid
xgb_tune <- train(median_house_value ~.,
data=Training,
objective="reg:squarederror",
method="xgbTree",
nthread = 8,
metric = "RMSE",
trControl=cv.ctrl,
tuneGrid=xgb.grid
)
xgb_tune$results
xgb.grid <- expand.grid(nrounds = 300,
max_depth = 12,
eta = 0.01,
gamma = 0.0,
colsample_bytree = 0.8,
min_child_weight=1,
subsample=0.5
)
xgb.grid
xgb_tune <- train(median_house_value ~.,
data=Training,
objective="reg:squarederror",
method="xgbTree",
nthread = 8,
metric = "RMSE",
trControl=cv.ctrl,
tuneGrid=xgb.grid
)
xgb_tune$results
#Cargo archivo a predecir
test_final <- read.csv("test.csv")
#Agrega a valores NA de total_bedrooms la media igual a la anterior
summary(test_final)
test_final[is.na(test_final)] <- 538.2
unique(test_final[10])
test_final$ocean_proximity <- as.character(test_final$ocean_proximity)
test_final[test_final$ocean_proximity == "NEAR OCEAN", 10] <- 5
test_final[test_final$ocean_proximity == "INLAND", 10] <- 2
test_final[test_final$ocean_proximity == "<1H OCEAN", 10] <- 1
test_final[test_final$ocean_proximity == "NEAR BAY", 10] <- 4
test_final$ocean_proximity <- as.integer(test_final$ocean_proximity)
salida
xgb.grid <- expand.grid(nrounds = 400,
max_depth = seq(10,15),
eta = c(0.01,0.3),
gamma = c(0.0, 0.2, 1),
colsample_bytree = c(0.5,0.8, 1),
min_child_weight=seq(1,10),
subsample=c(0.01,0.5, 1)
)
xgb.grid
xgb.grid
#Resultados por cada modelo
xgb_tune$results
xgb.grid
xgb.grid <- expand.grid(nrounds = 1000,
max_depth = 14,
eta = 0.01,
gamma = 02,
colsample_bytree = 0.8,
min_child_weight=2,
subsample=0.5
)
xgb.grid
xgb_tune <- train(median_house_value ~.,
data=Training,
objective="reg:squarederror",
method="xgbTree",
nthread = 8,
metric = "RMSE",
trControl=cv.ctrl,
tuneGrid=xgb.grid
)
# Load Packages
library(Metrics)
library(corrplot)
library(randomForest)
library(lars)
library(ggplot2)
library(xgboost)
library(Matrix)
library(methods)
library(caret)
library(dplyr)
library(Metrics)
library(corrplot)
library(randomForest)
library(lars)
library(ggplot2)
library(xgboost)
library(Matrix)
library(methods)
library(caret)
library(dplyr)
Training <- read.csv("train.csv")
Test <- read.csv("test.csv")
summary(Training)
#Agrego a los valores faltantes el promedio de total_bedrooms
Training[is.na(Training)] <- 538.2
summary(Training)
#Eliminar los valores ISLAND de ocean_proximity debido a que no existe en el dataset de evauacion
Training <- Training[Training$ocean_proximity != "ISLAND", ]
summary(Training)
#Cambia a valores nuemricos la variable ocean_proximity
Training[,11]<-as.integer(Training[,11])
summary(Training)
unique(Training$ocean_proximity)
#Quitando ID
Training <- Training[-1]
Training
corrplot(cor(Training[ , 1:10]),
method = "number",
number.cex=0.75,
type = "upper")
graf_income_value<- ggplot(Training,aes(x= median_income,y=median_house_value)) + geom_point(col = "blue") + geom_smooth(col = "red")
graf_income_value
graf_rooms_value<- ggplot(Training,aes(x= total_rooms+total_bedrooms,y=median_house_value)) + geom_point(col = "blue") + geom_smooth(col = "red")
graf_rooms_value
graf_age_value<- ggplot(Training,aes(x= housing_median_age,y=median_house_value)) + geom_point(col = "blue") + geom_smooth(col = "red")
graf_age_value
reg<- lm(median_house_value~., data = Training)
summary(reg)
#Parametros de control
cv.ctrl <- trainControl(method = "repeatedcv", repeats = 1,number = 3)
xgb.grid <- expand.grid(nrounds = 1000,
max_depth = 14,
eta = 0.01,
gamma = 02,
colsample_bytree = 0.8,
min_child_weight=2,
subsample=0.5
)
xgb.grid
xgb_tune <- train(median_house_value ~.,
data=Training,
objective="reg:squarederror",
method="xgbTree",
nthread = 8,
metric = "RMSE",
trControl=cv.ctrl,
tuneGrid=xgb.grid
)
#Resultados por cada modelo
xgb_tune$results
test_final <- read.csv("test.csv")
#Agrega a valores NA de total_bedrooms la media igual a la anterior
summary(test_final)
test_final[is.na(test_final)] <- 538.2
#Valido que los tipo de ocean_proximity
unique(test_final[10])
#Cambiando variables categoricas a numericas iguales al set de entrnamiento
test_final$ocean_proximity <- as.character(test_final$ocean_proximity)
test_final[test_final$ocean_proximity == "NEAR OCEAN", 10] <- 5
test_final[test_final$ocean_proximity == "INLAND", 10] <- 2
test_final[test_final$ocean_proximity == "<1H OCEAN", 10] <- 1
test_final[test_final$ocean_proximity == "NEAR BAY", 10] <- 4
test_final$ocean_proximity <- as.integer(test_final$ocean_proximity)
#Prediccion de datos anteriores
#Prediccion de datos anteriores
prediction_xg <- predict(xgb_tune, newdata= test_final)
#Creando el dataset de salida
salida <- data.frame(id = test_final$id, median_house_value=prediction_xg)
#Generando archivo de salida
write.csv(salida, "salida.csv", row.names = FALSE)
xgb.grid <- expand.grid(nrounds = 900,
max_depth = 11,
eta = 0.01,
gamma = 1,
colsample_bytree = 0.8,
min_child_weight=1,
subsample=0.5
)
xgb.grid
xgb_tune <- train(median_house_value ~.,
data=Training,
objective="reg:squarederror",
method="xgbTree",
nthread = 8,
metric = "RMSE",
trControl=cv.ctrl,
tuneGrid=xgb.grid
)
#Resultados por cada modelo
xgb_tune$results
#Prediccion de datos anteriores
prediction_xg <- predict(xgb_tune, newdata= test_final)
#Creando el dataset de salida
salida <- data.frame(id = test_final$id, median_house_value=prediction_xg)
#Generando archivo de salida
write.csv(salida, "salida.csv", row.names = FALSE)
salida
library(Metrics)
library(corrplot)
library(randomForest)
library(lars)
library(ggplot2)
library(xgboost)
library(Matrix)
library(methods)
library(caret)
library(dplyr)
library(Metrics)
library(corrplot)
library(randomForest)
library(lars)
library(ggplot2)
library(xgboost)
library(Matrix)
library(methods)
library(caret)
library(dplyr)
plot(cars)
library(dplyr)
library(ggplot2)
library(corrplot)
library(reshape2)
x<-c(16,25,39,45,49,64,70)
y<-c(140,149,165,170,165,159,144)
x
y
dataset <- data.frame(X = x, Y = y)
dataset
dataset %>%
ggplot(aes(x = X, y = Y)) +
geom_point(col = "blue") +
ggtitle("Modelo de regresion para Presion Arterial Sistolica") +
xlab("Edad") +
ylab("Peso") +
theme_classic()
dataset %>%
ggplot(aes(x = X, y = Y)) +
geom_point(col = "blue") +
ggtitle("Modelo de regresion para Presion Arterial Sistolica") +
xlab("Edad") +
ylab("Peso") +
theme_classic()
edad<-c(16,25,39,45,49,64,70)
peso<-c(140,149,165,170,165,159,144)
presion<-c(140,149,165,170,165,159,144)
x
y
dataset <- data.frame(edad = edad, peso = peso, presion = presion)
dataset
dataset %>%
ggplot(aes(x = edad, y = peso)) +
geom_point(col = "blue") +
ggtitle("Modelo de regresion para Presion Arterial Sistolica") +
xlab("Edad") +
ylab("Peso") +
theme_classic()
model1 <- dataset %>%
lm(formula = presion ~ edad + peso)
summary(model1)
b0 <- model1$coefficients[1]
b1 <- model1$coefficients[2]
dataset2 %>%
ggplot(aes(x = edad, y = peso)) +
geom_point(col = "blue") +
geom_abline(slope = b1, intercept = b0, col = "red", size = 1) +
theme_classic()
b0 <- model1$coefficients[1]
b1 <- model1$coefficients[2]
dataset %>%
ggplot(aes(x = edad, y = peso)) +
geom_point(col = "blue") +
geom_abline(slope = b1, intercept = b0, col = "red", size = 1) +
theme_classic()
model1$coefficients[1]
model1$coefficients[2]
datos_calc <- dataset%>%
select(edad, peso)
model1 <- dataset %>%
lm(formula = presion ~ data = edad + peso)
model1 <- dataset %>%
lm(formula = presion ~ edad + peso)
summary(model1)
plot(cars)
library(dplyr)
library(ggplot2)
library(corrplot)
library(reshape2)
notcars
mrcars
mtcars
mtcars_data <- mtcars %>%
select(dist(, mpg))
mtcars_data <- mtcars %>%
select(disp, mpg)
mtcars_data
rownames(mtcars_data) <- null
rownames(mtcars_data) <- NULL
mtcars_data
plot(mtcars_data, pch = 16, col = "red")
summary(mtcars_data$disp)
xaxis seq(70, 475, by = 1)
xaxis <- seq(70, 475, by = 1)
summary(lm_1)
lm_1 <- lm(mpg ~ disp, data = mtcars_data)
summary(lm_1)
plot(mtcars_data, pch = 16, col = "red")
points(xaxis,
predict(lm_1, data.frame(disp = xaxis)),
type = "l", lwd = 2)
lm_2 <- lm(mpg ~ poly(disp, 2), data = mtcars_data)
summary(lm_2)
plot(mtcars_data, pch = 16, col = "red")
points(xaxis,
predict(lm_1, data.frame(disp = xaxis)),
type = "l", lwd = 2)
points(xaxis,
predict(lm_2, data.frame(disp = xaxis)),
type = "l", lwd = 2)
lm_4 <- lm(mpg ~ poly(disp, 4), data = mtcars_data)
summary(lm_4)
plot(mtcars_data, pch = 16, col = "red")
points(xaxis,
predict(lm_1, data.frame(disp = xaxis)),
type = "l", lwd = 2)
points(xaxis,
predict(lm_2, data.frame(disp = xaxis)),
type = "l", lwd = 2)
points(xaxis,
predict(lm_4, data.frame(disp = xaxis)),
type = "l", lwd = 2)
plot(mtcars_data, pch = 16, col = "red")
points(xaxis,
predict(lm_1, data.frame(disp = xaxis)),
type = "l", lwd = 2)
points(xaxis,
predict(lm_2, data.frame(disp = xaxis)),
type = "l", lwd = 2, col = "blue")
plot(mtcars_data, pch = 16, col = "red")
points(xaxis,
predict(lm_1, data.frame(disp = xaxis)),
type = "l", lwd = 2)
points(xaxis,
predict(lm_2, data.frame(disp = xaxis)),
type = "l", lwd = 2, col = "blue")
points(xaxis,
predict(lm_4, data.frame(disp = xaxis)),
type = "l", lwd = 2, col = "green")
lm_1 <- lm(mpg ~ presion, data = dataset)
lm_1 <- lm(presion ~ edad + peso, data = dataset)
summary(lm_1)
model1$coefficients
lm_1$coefficients
lm_1 <- lm(presion ~ poly(edad + peso, 2), data = dataset)
summary(lm_1)
lm_1$coefficients
model1 <- dataset %>%
lm(formula = presion ~ edad + peso)
summary(model1)
lm_1 <- lm(presion ~ poly(edad + peso, 2), data = dataset)
summary(lm_1)
model1 <- dataset %>%
lm(formula = presion ~ edad + peso)
summary(model1)
edad<-c(16,25,39,45,49,64,70)
peso<-c(140,149,165,170,165,159,144)
presion<-c(125, 129,127,150,161,144,132)
x
y
dataset <- data.frame(edad = edad, peso = peso, presion = presion)
dataset
model1 <- dataset %>%
lm(formula = presion ~ edad + peso)
summary(model1)
lm_1 <- lm(presion ~ poly(edad + peso, 2), data = dataset)
summary(lm_1)
model1 <- dataset %>%
lm(formula = presion ~ edad + peso)
summary(model1)
install.packages("shiny")
install.packages("shinydashboard")
install.packages("reticulate")
library(reticulate)
use_python('C:\Users\alvar\Anaconda3')
use_python('C:\Users\alvar\Anaconda3')
use_python('C:/Users/alvar/Anaconda3')
use_python("C:/Users/alvar/Anaconda3/envs/tf")
library(reticulate)
use_python("C:/Users/alvar/Anaconda3/envs/tf")
shiny::runApp('G:/Mi unidad/ALGORITMOS EN LA CIENCIA DE DATOS/Proyecto')
runApp('G:/Mi unidad/ALGORITMOS EN LA CIENCIA DE DATOS/Proyecto')
runApp('G:/Mi unidad/ALGORITMOS EN LA CIENCIA DE DATOS/Proyecto')
library(reticulate)
use_python("C:/Users/alvar/Anaconda3/envs/tf")
shiny::runApp('G:/Mi unidad/ALGORITMOS EN LA CIENCIA DE DATOS/Proyecto')
runApp('G:/Mi unidad/ALGORITMOS EN LA CIENCIA DE DATOS/Proyecto')
runApp('G:/Mi unidad/ALGORITMOS EN LA CIENCIA DE DATOS/Proyecto')
shiny::runApp('G:/Mi unidad/ALGORITMOS EN LA CIENCIA DE DATOS/Proyecto')
shiny::runApp('G:/Mi unidad/ALGORITMOS EN LA CIENCIA DE DATOS/Proyecto')
runApp('G:/Mi unidad/ALGORITMOS EN LA CIENCIA DE DATOS/Proyecto')
runApp()
runApp('G:/Mi unidad/ALGORITMOS EN LA CIENCIA DE DATOS/Proyecto')
runApp('G:/Mi unidad/ALGORITMOS EN LA CIENCIA DE DATOS/Proyecto')
runApp('G:/Mi unidad/ALGORITMOS EN LA CIENCIA DE DATOS/Proyecto')
runApp()
runApp('G:/Mi unidad/ALGORITMOS EN LA CIENCIA DE DATOS/Proyecto')
shiny::runApp('G:/Mi unidad/ALGORITMOS EN LA CIENCIA DE DATOS/Proyecto')
runApp('G:/Mi unidad/ALGORITMOS EN LA CIENCIA DE DATOS/Proyecto')
runApp('G:/Mi unidad/ALGORITMOS EN LA CIENCIA DE DATOS/Proyecto')
runApp('G:/Mi unidad/ALGORITMOS EN LA CIENCIA DE DATOS/Proyecto')
runApp('G:/Mi unidad/ALGORITMOS EN LA CIENCIA DE DATOS/Proyecto')
runApp('G:/Mi unidad/ALGORITMOS EN LA CIENCIA DE DATOS/Proyecto')
shiny::runApp('G:/Mi unidad/ALGORITMOS EN LA CIENCIA DE DATOS/Proyecto')
shiny::runApp('G:/Mi unidad/ALGORITMOS EN LA CIENCIA DE DATOS/Proyecto')
shiny::runApp('G:/Mi unidad/ALGORITMOS EN LA CIENCIA DE DATOS/Proyecto')
runApp('G:/Mi unidad/ALGORITMOS EN LA CIENCIA DE DATOS/Proyecto')
shiny::runApp('G:/Mi unidad/ALGORITMOS EN LA CIENCIA DE DATOS/Proyecto')
runApp('G:/Mi unidad/ALGORITMOS EN LA CIENCIA DE DATOS/Proyecto')
runApp('G:/Mi unidad/ALGORITMOS EN LA CIENCIA DE DATOS/Proyecto')
shiny::runApp('G:/Mi unidad/ALGORITMOS EN LA CIENCIA DE DATOS/Proyecto')
runApp('G:/Mi unidad/ALGORITMOS EN LA CIENCIA DE DATOS/Proyecto')
shiny::runApp('G:/Mi unidad/ALGORITMOS EN LA CIENCIA DE DATOS/Proyecto')
shiny::runApp('G:/Mi unidad/ALGORITMOS EN LA CIENCIA DE DATOS/Proyecto')
shiny::runApp('G:/Mi unidad/ALGORITMOS EN LA CIENCIA DE DATOS/Proyecto')
shiny::runApp('G:/Mi unidad/ALGORITMOS EN LA CIENCIA DE DATOS/Proyecto')
shiny::runApp('G:/Mi unidad/ALGORITMOS EN LA CIENCIA DE DATOS/Proyecto')
shiny::runApp('G:/Mi unidad/ALGORITMOS EN LA CIENCIA DE DATOS/Proyecto')
shiny::runApp('G:/Mi unidad/ALGORITMOS EN LA CIENCIA DE DATOS/Proyecto')
shiny::runApp('G:/Mi unidad/ALGORITMOS EN LA CIENCIA DE DATOS/Proyecto')
shiny::runApp('G:/Mi unidad/ALGORITMOS EN LA CIENCIA DE DATOS/Proyecto')
shiny::runApp('G:/Mi unidad/ALGORITMOS EN LA CIENCIA DE DATOS/Proyecto')
runApp('G:/Mi unidad/ALGORITMOS EN LA CIENCIA DE DATOS/Proyecto')
shiny::runApp('G:/Mi unidad/ALGORITMOS EN LA CIENCIA DE DATOS/Proyecto')
shiny::runApp('G:/Mi unidad/ALGORITMOS EN LA CIENCIA DE DATOS/Proyecto')
shiny::runApp('G:/Mi unidad/ALGORITMOS EN LA CIENCIA DE DATOS/Proyecto')
shiny::runApp('G:/Mi unidad/ALGORITMOS EN LA CIENCIA DE DATOS/Proyecto')
shiny::runApp('G:/Mi unidad/ALGORITMOS EN LA CIENCIA DE DATOS/Proyecto')
shiny::runApp('G:/Mi unidad/ALGORITMOS EN LA CIENCIA DE DATOS/Proyecto')
shiny::runApp('G:/Mi unidad/ALGORITMOS EN LA CIENCIA DE DATOS/Proyecto')
shiny::runApp('G:/Mi unidad/ALGORITMOS EN LA CIENCIA DE DATOS/Proyecto')
shiny::runApp('G:/Mi unidad/ALGORITMOS EN LA CIENCIA DE DATOS/Proyecto')
shiny::runApp('G:/Mi unidad/ALGORITMOS EN LA CIENCIA DE DATOS/Proyecto')
shiny::runApp('G:/Mi unidad/ALGORITMOS EN LA CIENCIA DE DATOS/Proyecto')
shiny::runApp('G:/Mi unidad/ALGORITMOS EN LA CIENCIA DE DATOS/Proyecto')
shiny::runApp('G:/Mi unidad/ALGORITMOS EN LA CIENCIA DE DATOS/Proyecto')
shiny::runApp('R/test_shiny')
runApp('R/test_shiny')
runApp('R/test_shiny')
runApp('R/test_shiny')
runApp('R/test_shiny')
runApp('R/test_shiny')
runApp('R/test_shiny')
runApp('R/test_shiny')
runApp('R/test_shiny')
runApp('R/test_shiny')
runApp('R/test_shiny')
runApp('R/test_shiny')
runApp('R/test_shiny')
runApp('R/test_shiny')
runApp('R/test_shiny')
runApp('R/test_shiny')
runApp('R/test_shiny')
runApp('R/test_shiny')
runApp('R/test_shiny')
runApp('R/test_shiny')
library(lubridate)
runApp('R/test_shiny')
install.packages("lubridate")
